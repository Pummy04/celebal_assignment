class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def add_node(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            print(f"Added {data} as head node.")
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node
            print(f"Added {data} to the end of the list.")

    def print_list(self):
        if self.head is None:
            print("The list is empty.")
            return

        current = self.head
        print("Linked List:", end=" ")
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_nth_node(self, n):
        if self.head is None:
            raise Exception("Cannot delete from an empty list.")

        if n <= 0:
            raise IndexError("Index must be a positive integer.")

        if n == 1:
            deleted_data = self.head.data
            self.head = self.head.next
            print(f"Deleted node {n} with value {deleted_data}.")
            return

        current = self.head
        count = 1
        while current and count < n - 1:
            current = current.next
            count += 1

        if current is None or current.next is None:
            raise IndexError("Index out of range.")

        deleted_data = current.next.data
        current.next = current.next.next
        print(f"Deleted node {n} with value {deleted_data}.")


ll = LinkedList()
ll.add_node(10)
ll.add_node(20)
ll.add_node(30)
ll.add_node(40)

ll.print_list()

try:
    ll.delete_nth_node(2)
except Exception as e:
    print("Error:", e)

ll.print_list()

try:
    ll.delete_nth_node(10)
except Exception as e:
    print("Error:", e)

try:
    empty_list = LinkedList()
    empty_list.delete_nth_node(1)
except Exception as e:
    print("Error:", e)
